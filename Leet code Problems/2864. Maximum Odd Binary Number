You are given a binary string s that contains at least one '1'.

You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.

Return a string representing the maximum odd binary number that can be created from the given combination.

Note that the resulting string can have leading zeros.

Example 1:

Input: s = "010"
Output: "001"
Explanation: Because there is just one '1', it must be in the last position. So the answer is "001".
Example 2:

Input: s = "0101"
Output: "1001"
Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is "100". So the answer is "1001".




class Solution {
    public String maximumOddBinaryNumber(String s) {
        char[] nums = s.toCharArray();
        int n = nums.length -1;
        int left =0;
        int right = n;
        while(left<=right){
            if(nums[left] == '1') left++;
            if(nums[right] == '0') right--;
            
            if(left <= right && nums[left] == '0' && nums[right] == '1'){
                char temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
            }
        }
        char temp = nums[left-1];
        nums[left-1] = nums[n];
        nums[n] = temp;
        return new String(nums);
    }
}
