Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.


In this problem we are first calculating the prefix sum in the answer array.
And then computing the sufix sum and then multiply it in the prefix sum place in the answer.

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

import java.util.*;
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        Arrays.fill(ans,1);
        for(int i =1; i<n;i++){
            ans[i] = ans[i-1] * nums[i-1]; 
        }
        int sum = 1;
        for(int i =n-2; i>=0; i--){
            sum *= nums[i+1];
            ans[i] *= sum;
        }
        return ans;
    }
}
